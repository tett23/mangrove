// Code generated by go-bindata.
// sources:
// config/mysql.yml
// config/storage.yml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configMysqlYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xce\x41\xae\xc2\x30\x0c\x84\xe1\xbd\x4f\x31\x27\xa8\x92\xd7\x27\x84\x7c\x19\xe4\x26\x2e\x20\xa5\x38\x8a\x5d\xb8\x3e\xea\x86\x35\x1b\x76\xb3\x99\x5f\x5f\xb3\x22\x8d\x09\x90\x5a\x87\xba\x33\x72\x9a\xd2\x94\xa7\x9c\x13\xcf\x73\x3a\x11\xb0\xbb\x0e\x46\x68\xc4\xdf\x4c\x40\x17\xf7\x97\x8d\xca\x9f\x45\x40\x95\x90\x45\x5c\x19\xeb\xb0\xeb\x72\x8f\x4b\xd5\xa7\x36\xeb\x9b\x3e\xe2\x38\x0d\x0b\x2b\xd6\x18\x51\x3a\x01\xe5\x26\xc3\x35\x18\x7b\xac\xe7\x6d\xf9\x27\x0a\xf5\xf8\x09\xe4\x08\x7f\x23\x78\x07\x00\x00\xff\xff\x8c\x67\x33\x28\x0b\x01\x00\x00")

func configMysqlYmlBytes() ([]byte, error) {
	return bindataRead(
		_configMysqlYml,
		"config/mysql.yml",
	)
}

func configMysqlYml() (*asset, error) {
	bytes, err := configMysqlYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/mysql.yml", size: 267, mode: os.FileMode(420), modTime: time.Unix(1508780974, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configStorageYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xca\xc1\x09\x02\x41\x0c\x05\xd0\xfb\x54\xf1\x1b\x90\xa0\xde\xa6\x81\xad\x40\xef\x59\x8c\x3b\x82\x99\x48\x12\xfb\x17\x3d\x05\xd9\xeb\xe3\x45\x9a\xf3\x26\xd1\x1b\x70\xc0\x64\x95\x8e\x9b\xdb\x6a\x0d\x00\x5e\x9c\xa3\x83\x74\x26\xfd\x90\xee\x6e\xdb\xfa\xc8\x92\x27\xc7\xf1\xff\x7e\x6d\xa7\x0e\x53\xa9\xf5\x12\xe2\x41\x29\x99\xa7\x73\x69\x4b\x3d\x57\x7b\xbe\x55\x82\x96\xf6\x09\x00\x00\xff\xff\xa7\x54\x4a\xb6\xaa\x00\x00\x00")

func configStorageYmlBytes() ([]byte, error) {
	return bindataRead(
		_configStorageYml,
		"config/storage.yml",
	)
}

func configStorageYml() (*asset, error) {
	bytes, err := configStorageYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/storage.yml", size: 170, mode: os.FileMode(420), modTime: time.Unix(1508783883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/mysql.yml": configMysqlYml,
	"config/storage.yml": configStorageYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"mysql.yml": &bintree{configMysqlYml, map[string]*bintree{}},
		"storage.yml": &bintree{configStorageYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

